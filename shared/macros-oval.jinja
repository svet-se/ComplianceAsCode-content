
{{#
  Constants.
#}}
{{%- set suffix_id_default_not_overriden = "_default_not_overriden" -%}}

{{#
  High level macro which checks if a particular combination of parameter and value in a configuration file is set.
  This function can take nine parameters:
    - path (String): Path to the configuration file to be checked.
    - prefix_regex (String): Regular expression to be used in the beginning of the OVAL text file content check.
    - parameter (String): The parameter to be checked in the configuration file.
    - value (String): The value to be checked. This can also be a regular expression (e.g: value1|value2 can match both values).
    - separator_regex (String): Regular expression to be used as the separator of parameter and value in a configuration file. If spaces are allowed, this should be included in the regular expression.
    - missing_parameter_pass (boolean): If set, the check will also pass if the parameter is not present in the configuration file (default is applied).
    - application (String): The application which the configuration file is being checked. Can be any value and does not affect the OVAL check.
    - multi_value (boolean): If set, it means that the parameter can accept multiple values and the expected value must be present in the current list of values.
    - missing_config_file_fail (boolean): If set, the check will fail if the configuration is not existent in the system.
    - supported_platforms (String List): List of supported platforms the OVAL will applicable to. (e.g.: ['rhel7', 'rhel8', 'fedora'])
#}}
{{%- macro oval_check_config_file(path='', prefix_regex='^\s*', parameter='', separator_regex='(?-i)[\s]+', value='', missing_parameter_pass=false, application='', multi_value='', missing_config_file_fail=false, supported_platforms=['all']) -%}}
<def-group>
  <definition class="compliance" id="{{{ rule_id }}}" version="1">
    <metadata>
      <title>{{{ rule_title }}}</title>
      <affected family="unix">
{{#-
  Use macro oval_affected(products) when it is available
#}}
        <platform>multi_platform_rhel</platform>
        <platform>multi_platform_fedora</platform>
        <platform>multi_platform_rhv</platform>
        <platform>multi_platform_ol</platform>
        <platform>multi_platform_wrlinux</platform>
      </affected>
      <description>Look for parameter '{{{ parameter }}}' with value '{{{ value }}}' in '{{{ path }}}'</description>
    </metadata>
    {{%- if missing_config_file_fail %}}
    <criteria comment="{{{ application }}} is configured correctly and configuration file exists"
    operator="AND">
    {{%- endif %}}
    {{%- if application == "sshd" %}}
{{#-
    This condition is here to avoid regression in sshd configuration rules.
    The OVAL checks for sshd configuration test if the package is installed
    and if it is required or not by the profile. When rule applicability is
    done for these rules, it can be removed.
#}}
    <criteria comment="{{{ application }}} is configured correctly or is not installed"
    operator="OR">
        {{{- application_not_required_or_requirement_unset() }}}
    {{%- else %}}
    <criteria comment="{{{ application }}} is configured correctly"
    operator="OR">
    {{%- endif %}}
        {{{- oval_line_in_file_criterion(path, parameter) }}}
        {{%- if missing_parameter_pass %}}
        {{{- oval_line_in_file_criterion(path, parameter, missing_parameter_pass) }}}
        {{%- endif %}}
    </criteria>
    {{%- if missing_config_file_fail %}}
        {{{- oval_config_file_exists_criterion(path) }}}
    </criteria>
    {{%- endif %}}
  </definition>
  {{{ oval_line_in_file_test(path, parameter) }}}
  {{{ oval_line_in_file_object(path, prefix_regex, parameter, separator_regex) }}}
  {{{ oval_line_in_file_state(value, multi_value) }}}
  {{%- if missing_parameter_pass %}}
  {{{ oval_line_in_file_test(path, parameter, missing_parameter_pass) }}}
  {{{ oval_line_in_file_object(path, prefix_regex, parameter, separator_regex, missing_parameter_pass) }}}
  {{%- endif %}}
  {{%- if missing_config_file_fail %}}
  {{{ oval_config_file_exists_test(path) }}}
  {{{ oval_config_file_exists_object(path) }}}
  {{%- endif %}}

</def-group>
{{%- endmacro %}}

{{#
  Macro to define the criterion of the OVAL check (Criterion definition).
  This function can take three parameters:
    - path (String): Path to the configuration file to be checked.
    - parameter (String): The parameter to be checked in the configuration file.
    - missing_parameter_pass (boolean): If set, the check will also pass if the parameter is not present in the configuration file (default is applied).
#}}
{{%- macro oval_line_in_file_criterion(path='', parameter='', missing_parameter_pass=false) -%}}
{{%- set suffix_id = "" -%}}
{{%- set prefix_text = "Check the" -%}}
{{%- if missing_parameter_pass %}}
{{%- set suffix_id = suffix_id_default_not_overriden -%}}
{{%- set prefix_text = prefix_text + " absence of" -%}}
{{%- endif %}}
      <criterion comment="{{{ prefix_text }}} {{{ parameter }}} in {{{ path }}}"
      test_ref="test_{{{ rule_id }}}{{{ suffix_id }}}" />
{{%- endmacro %}}

{{#
  Macro to define the OVAL test to be constructed (Test definition).
  This function can take three parameters:
    - path (String): Path to the configuration file to be checked.
    - parameter (String): The parameter to be checked in the configuration file.
    - missing_parameter_pass (boolean): If set, the check will also pass if the parameter is not present in the configuration file (default is applied).
#}}
{{%- macro oval_line_in_file_test(path='', parameter='', missing_parameter_pass=false) -%}}
{{%- set suffix_id = "" -%}}
{{%- if missing_parameter_pass %}}
{{%- set check_existence = "none_exist" -%}}
{{%- set prefix_text = "value" -%}}
{{%- set suffix_id = suffix_id_default_not_overriden -%}}
{{%- else %}}
{{%- set check_existence = "all_exist" -%}}
{{%- set prefix_text = "absence" -%}}
{{%- endif %}}
  <ind:textfilecontent54_test check="all" check_existence="{{{ check_existence }}}"
  comment="tests the {{{ prefix_text }}} of {{{ parameter }}} setting in the {{{ path }}} file"
  id="test_{{{ rule_id }}}{{{ suffix_id }}}" version="1">
  <ind:object object_ref="obj_{{{ rule_id }}}{{{ suffix_id }}}" />
  {{%- if not missing_parameter_pass %}}
  <ind:state state_ref="state_{{{ rule_id }}}{{{ suffix_id }}}" />
  {{%- endif %}}
  </ind:textfilecontent54_test>
{{%- endmacro %}}

{{#
  Macro to check if a parameter in a configuration file is set (Object definition).
  This function can take five parameters:
    - path (String): Path to the configuration file to be checked.
    - prefix_regex (String): Regular expression to be used in the beginning of the OVAL text file content check.
    - parameter (String): The parameter to be checked in the configuration file.
    - separator_regex (String): Regular expression to be used as the separator of parameter and value in a configuration file. If spaces are allowed, this should be included in the regular expression.
    - missing_parameter_pass (boolean): If set, the check will also pass if the parameter is not present in the configuration file (default is applied).
#}}
{{%- macro oval_line_in_file_object(path='', prefix_regex='^[\s]*', parameter='', separator_regex='[\s]+', missing_parameter_pass=false) -%}}
{{%- set suffix_id = "" -%}}
{{%- if missing_parameter_pass %}}
{{%- set suffix_id = suffix_id_default_not_overriden -%}}
{{#
  There is no need for having a regular expression with a capture
  group "(.*)" when checking if the parameter is not present in
  the configuration file.
#}}
{{%- set regex = prefix_regex+parameter+separator_regex -%}}
{{%- else %}}
{{%- set regex = prefix_regex+parameter+separator_regex+"(.*)[\s]*(?:|(?:#.*))?$" -%}}
{{%- endif %}}
  <ind:textfilecontent54_object id="obj_{{{ rule_id }}}{{{ suffix_id }}}" version="1">
    <ind:filepath>{{{ path }}}</ind:filepath>
    <ind:pattern operation="pattern match">{{{ regex }}}</ind:pattern>
    <ind:instance datatype="int">1</ind:instance>
  </ind:textfilecontent54_object>
{{%- endmacro %}}

{{#
  Macro to check if a expected value can be found in the extracted information of an OVAL object (State definition).
  This function can take two parameters:
    - value (String): The value to be checked. This can also be a regular expression (e.g: value1|value2 can match both values).
    - multi_value (boolean): If set, it means that the parameter can accept multiple values and the expected value must be present in the current list of values.
#}}
{{%- macro oval_line_in_file_state(value='', multi_value='') -%}}
{{%- if multi_value %}}
{{%- set regex = "^.*"+value+".*$" -%}}
{{%- else %}}
{{%- set regex = "^"+value+"$" -%}}
{{%- endif %}}
  <ind:textfilecontent54_state id="state_{{{ rule_id }}}" version="1">
    <ind:subexpression datatype="string" operation="pattern match">{{{ regex }}}</ind:subexpression>
  </ind:textfilecontent54_state>
{{%- endmacro %}}

{{#
  Macro to define the OVAL criterion to check if the configuration file exists (Criterion definition).
  This function can take one parameters:
    - path (String): Path to the configuration file to be checked.
#}}
{{%- macro oval_config_file_exists_criterion(path='') -%}}
	<criterion comment="test if configuration file {{{ path }}} exists for {{{ rule_id }}}" test_ref="test_{{{ rule_id }}}_config_file_exists" />
{{%- endmacro %}}

{{#
  Macro to define the OVAL test to check if the configuration file exists (Test definition).
  This function can take one parameter:
    - path (String): Path to the configuration file to be checked.
#}}
{{%- macro oval_config_file_exists_test(path='') -%}}
  <unix:file_test id="test_{{{ rule_id }}}_config_file_exists" check="all" check_existence="all_exist" comment="The configuration file {{{ path }}} exists for {{{ rule_id }}}" version="1">
    <unix:object object_ref="obj_{{{ rule_id }}}_config_file" />
  </unix:file_test>
{{%- endmacro %}}

{{#
  Macro to define the OVAL object to check if the configuration file exists (Object definition).
  This function can take one parameters:
    - path (String): Path to the configuration file to be checked.
#}}
{{%- macro oval_config_file_exists_object(path='') -%}}
  <unix:file_object id="obj_{{{ rule_id }}}_config_file" comment="The configuration file {{{ path }}} for {{{ rule_id }}}" version="1">
    <unix:filepath operation="pattern match">^{{{ path }}}</unix:filepath>
  </unix:file_object>
{{%- endmacro %}}

{{#
  High level macro to check if a particular combination of parameter and value in the ssh daemon configuration file is set.
  This function can take five parameters:
    - parameter (String): The parameter to be checked in the configuration file.
    - value (String): The value to be checked. This can also be a regular expression (e.g: value1|value2 can match both values).
    - missing_parameter_pass (boolean): If set, the check will also pass if the parameter is not present in the configuration file (default is applied).
    - multi_value (boolean): If set, it means that the parameter can accept multiple values and the expected value must be present in the current list of values.
    - missing_config_file_fail (boolean): If set, the check will fail if the configuration is not existent in the system.

  We specify a case insensitive comparison in the prefix because
  sshd_config has case-insensitive parameters (but case-sensitive values).
#}}
{{%- macro oval_sshd_config(parameter='', value='', missing_parameter_pass=false, multi_value=false, missing_config_file_fail=false, supported_platforms=['all']) %}}
{{{ oval_check_config_file("/etc/ssh/sshd_config", prefix_regex="(?i)^[\s]*", parameter=parameter, separator_regex='(?-i)[\s]+', value=value, missing_parameter_pass=missing_parameter_pass, application="sshd", multi_value=multi_value, missing_config_file_fail=missing_config_file_fail, supported_platforms=supported_platforms) }}}
{{%- endmacro %}}

{{#
  High level macro to check if a particular combination of parameter and value in the grub configuration file is set.
  This function can take five parameters:
    - parameter (String): The parameter to be checked in the configuration file.
    - value (String): The value to be checked. This can also be a regular expression (e.g: value1|value2 can match both values).
    - missing_parameter_pass (boolean): If set, the check will also pass if the parameter is not present in the configuration file (default is applied).
    - multi_value (boolean): If set, it means that the parameter can accept multiple values and the expected value must be present in the current list of values.
    - missing_config_file_fail (boolean): If set, the check will fail if the configuration is not existent in the system.
    - supported_platforms (String List): List of supported platforms the OVAL will applicable to. (e.g.: ['rhel7', 'rhel8', 'fedora'])
#}}
{{%- macro oval_grub_config(parameter='', value='', missing_parameter_pass=false, multi_value=true, missing_config_file_fail=false, supported_platforms=['all']) %}}
{{{ oval_check_config_file("/etc/default/grub", prefix_regex="^[\s]*", parameter=parameter, separator_regex='=', value=value, missing_parameter_pass=missing_parameter_pass, application="grub", multi_value=multi_value, missing_config_file_fail=missing_config_file_fail, supported_platforms=supported_platforms) }}}
{{%- endmacro %}}

{{#
  To be removed macro. Prevents regression on sshd configuration rules.
#}}
{{%- macro application_not_required_or_requirement_unset() -%}}
      <criteria comment="sshd is not installed" operator="AND">
        <extend_definition comment="sshd is not required or requirement is unset"
        definition_ref="sshd_not_required_or_unset" />
        <extend_definition comment="rpm package openssh-server removed"
        definition_ref="package_openssh-server_removed" />
      </criteria>
{{%- endmacro %}}
