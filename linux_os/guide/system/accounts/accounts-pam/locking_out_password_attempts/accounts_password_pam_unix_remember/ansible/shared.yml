# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv,multi_platform_sle
# reboot = false
# strategy = configure
# complexity = low
# disruption = medium
{{{ ansible_instantiate_variables("var_password_pam_unix_remember") }}}

- name: "{{{ rule_title }}}: set_fact"
  set_fact:
    {{% if product == "rhel8" -%}}
    control: 'required'
    {{%- else -%}}
    control: 'requisite'
    {{%- endif %}}

- name: "{{{ rule_title }}}: Check for existing entry"
  lineinfile:
    path: "/etc/pam.d/{{ item }}"
    create: no
    regexp: '^password.*pam_pwhistory.so.*'
    state: absent
  check_mode: true
  changed_when: false
  register: pam_pwhistory
  loop:
    - system-auth
    - password-auth

# if entry exists:
- name: "{{{ rule_title }}}: Update accordingly"
  block:
    - name: "{{{ rule_title }}}: Ensure correct control value for pam_pwhistory"
      pamd:
        name: "{{ item.0.path }}"
        type: password
        control: "{{ item.1 }}"
        module_path: pam_pwhistory.so
        new_control: "{{ control }}"
      loop: "{{ mod_files|subelements('controls') }}"
      vars:
        mod_files:
          - { path: system-auth, controls: "{{ mod_controls }}" }
          - { path: password-auth, controls: "{{ mod_controls }}" }
        mod_controls:
          - required
          - optional
          - requisite
          - sufficient
          - binding

    - name: "{{{ rule_title }}}: Ensure remember argument in pam_pwhistory"
      pamd:
        name: "{{ item }}"
        type: password
        control: "{{ control }}"
        module_path: pam_pwhistory.so
        module_arguments: 'use_authtok
            remember={{ var_password_pam_unix_remember }}'
        state: args_present
      loop:
        - system-auth
        - password-auth
  when: pam_pwhistory.results[0].found == 1 or pam_pwhistory.results[1].found == 1

# if entry does not exist - also to prevent duplicating
- name: "{{{ rule_title }}}: Add pam_pwhistory"
  pamd:
    name: "{{ item }}"
    type: password
    control: required
    module_path: pam_deny.so
    new_type: password
    new_control: "{{ control }}"
    new_module_path: pam_pwhistory.so
    module_arguments: 'use_authtok
        remember={{ var_password_pam_unix_remember }}'
    state: before
  when: pam_pwhistory.results[0].found == 0 or pam_pwhistory.results[1].found == 0
  loop:
    - system-auth
    - password-auth
