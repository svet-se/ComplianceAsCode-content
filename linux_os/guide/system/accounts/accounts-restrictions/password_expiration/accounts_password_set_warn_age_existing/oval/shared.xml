<def-group>
{{% set regex="^(?:[^:]*:)(?:[^\!\*:]*:)(?:[^:]*:){3}(\d+):(?:[^:]*:){2}(?:[^:]*)$" %}}
  <definition class="compliance" id="{{{ rule_id }}}" version="1">
    {{{ oval_metadata("Set Existing Passwords Warning Age") }}}
    <criteria operator="OR">
      <criterion test_ref="test_accounts_password_set_warn_age_existing"
        comment="Passwords must be configured to the appropriate warn age before expiring."/>
      <criterion test_ref="test_accounts_password_set_warn_age_existing_no_pass"
        comment="There is no password defined in /etc/shadow"/>
    </criteria>
  </definition>

  {{{ textfilecontent54_test_etc_shadow(
    test_id="test_accounts_password_set_warn_age_existing",
    regex=regex,
    external_variable_id="var_accounts_password_warn_age_login_defs",
    operation="greater than or equal") }}}

  <ind:textfilecontent54_test id="test_accounts_password_set_warn_age_existing_no_pass" version="1"
    check="all" check_existence="none_exist"
    comment="Check the inexistence of users with a password defined">
    <ind:object object_ref="object_accounts_password_set_warn_age_existing"/>
  </ind:textfilecontent54_test>

  <ind:textfilecontent54_object id="object_accounts_password_set_warn_age_existing" version="1">
    <ind:filepath>/etc/shadow</ind:filepath>
    <!-- subexpression capturing group matches the 6th field - maximum password age -->
    <!-- filters away accounts with no passwords and locked passwords (passwords are located in the 2nd field)-->
    <ind:pattern operation="pattern match">{{{ regex }}}</ind:pattern>
    <ind:instance operation="greater than or equal" datatype="int">1</ind:instance>
  </ind:textfilecontent54_object>

</def-group>
