documentation_complete: true

prodtype: sle12,sle15

title: "Set Existing Passwords Warning Age"

description: |-
    Configure non-compliant accounts, and give users time to come up with a secure password, 
    warning them in advance about the expiration of their current password. The variable 
    <tt>var_accounts_password_warn_age_login_defs={{{ xccdf_value("var_accounts_password_warn_age_login_defs") }}}</tt>,
    defines how many days the user's password will remain valid, and he/she will receive 
    a warning notification about.  The next command set ups this for not-compliant user's account:       
    <pre>$ sudo chage --warndays $var_accounts_password_warn_age_login_defs <i>USER</i></pre>

rationale: |-
    Providing an advance warning that a password will be expiring gives users 
    time to think of a secure password. Users caught unaware may choose a simple 
    password or write it down where it may be discovered.

severity: medium

identifiers:
    cce@sle12: CCE-92321-9
    cce@sle15: CCE-92479-5

references:
    cis@sle12: 5.4.1.4
    cis@sle15: 5.4.1.4
    disa: CCI-000198
    nist: IA-5(f),IA-5(1)(d),CM-6(a)
    nist@sle15: IA-5(1).1(v)

ocil_clause: 'any results are returned that are not associated with a system account'

ocil: |-
    Verify that {{{ full_name }}} has configured the warning that a password will be expiring for each user account 
    is number of days or greater, according to the days specified with the variable 
    var_accounts_password_warn_age_login_defs,  with the following command:

    $ sudo awk -F: '$6 < {{{ xccdf_value("var_accounts_password_warn_age_login_defs") }}} || $6 == "" {print $1}' /etc/shadow

fixtext: |-
    Configure non-compliant accounts to enforce a 24 hours/1 day minimum password lifetime:
    usrs_pass_warn_age=( $(awk -F: '$6 < {{{ xccdf_value("var_accounts_password_warn_age_login_defs") }}} || $6 == "" {print $1}' /etc/shadow) )
    for i in ${usrs_pass_warn_age[@]};
    do
       chage --warndays {{{ xccdf_value("var_accounts_password_warn_age_login_defs") }}} $i
    done
