<def-group>
  <definition class="compliance" id="{{{ rule_id }}}" version="1">
    {{{ oval_metadata("Group referred by variable var_pam_wheel_group_for_su exists and has no members.") }}}
    <criteria operator="AND">
      <criterion test_ref="test_ensure_pam_wheel_group_exist_and_has_no_member" />
    </criteria>
  </definition>

  <ind:textfilecontent54_test id="test_ensure_pam_wheel_group_exist_and_has_no_member" version="1"
    check="at least one" check_existence="all_exist"
    comment="ensure the group defined by pam_wheel.so group option exists and has no members">
    <ind:object object_ref="object_ensure_pam_wheel_group_exist_and_has_no_member" />
    <ind:state state_ref="state_ensure_pam_wheel_group_exist_and_has_no_member" />
  </ind:textfilecontent54_test>

  <ind:textfilecontent54_object id="object_ensure_pam_wheel_group_exist_and_has_no_member"
    comment="check /etc/group for empty groups" version="1">
    <ind:filepath>/etc/group</ind:filepath>
    <ind:pattern operation="pattern match">^([^:]+):[^:]+:[0-9]+:\s*$</ind:pattern>
    <ind:instance datatype="int" operation="greater than or equal">1</ind:instance>
  </ind:textfilecontent54_object>

  <ind:textfilecontent54_state id="state_ensure_pam_wheel_group_exist_and_has_no_member" version="1"
    comment="group must exist">
    <ind:subexpression operation="equals" datatype="string" var_ref="var_pam_wheel_group_for_su"/>
  </ind:textfilecontent54_state>

  <external_variable id="var_pam_wheel_group_for_su" datatype="string" version="1"
    comment="Name of the su group"/>
</def-group>
