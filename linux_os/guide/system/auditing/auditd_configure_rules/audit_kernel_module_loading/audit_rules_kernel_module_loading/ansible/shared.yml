# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv
# reboot = true
# strategy = restrict
# complexity = low
# disruption = low

#
# What architecture are we on?
#
- name: Set architecture for audit modules tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

- name: Declare list of syscals
  set_fact:
    syscalls:
      - "init_module"
      - "delete_module"
      {{% if product != "rhel6" %}}
      - "finit_module"
      {{% endif %}}

- name: declare number of syscalls
  set_fact: audit_kernel_number_of_syscalls="{{ syscalls|length|int }}"

#
#rules in /etc/audit/rules.d/*
#

- name: Check existence of syscalls for 32 bit architecture in /etc/audit/rules.d/*
  find:
    paths: "/etc/audit/rules.d"
    contains: '^\s*-a\s+always,exit\s+-F\s+arch=b32\s+.*-S\s+.*[\s,]+{{ item }}[\s,]+.*$'
    patterns: "*.rules"
  register: audit_kernel_found_32_rules_d
  loop: "{{ syscalls }}"

- name: get number of matched 32 bit syscalls in /etc/audit/rules.d/*
  set_fact: audit_kernel_matched_32_rules_d="{{audit_kernel_found_32_rules_d.results|sum(attribute='matched')|int }}"

- name: Check existence of syscalls for 64 bit architecture in /etc/audit/rules.d/*
  find:
    paths: "/etc/audit/rules.d"
    contains: '^\s*-a\s+always,exit\s+-F\s+arch=b64\s+.*-S\s+.*[\s,]+{{ item }}[\s,]+.*$'
    patterns: "*.rules"
  register: audit_kernel_found_64_rules_d
  loop: "{{ syscalls }}"

- name: get number of matched 64 bit syscalls in /etc/audit/rules.d/*
  set_fact: audit_kernel_matched_64_rules_d="{{audit_kernel_found_64_rules_d.results|sum(attribute='matched')|int }}"

- name: Search /etc/audit/rules.d for other kernel module loading audit rules
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "(-F key=modules)|(-k modules)$"
    patterns: "*.rules"
  register: find_modules

- name: If existing kernel module loading ruleset not found, use /etc/audit/rules.d/modules.rules as the recipient for the rule
  set_fact:
    all_files:
      - /etc/audit/rules.d/modules.rules
  when: find_modules.matched is defined and find_modules.matched == 0

- name: Use matched file as the recipient for the rule
  set_fact:
    all_files:
      - "{{ find_modules.files | map(attribute='path') | list | first }}"
  when: find_modules.matched is defined and find_modules.matched > 0

- name: Inserts the modules rule in rules.d when on x86
  block:
    - name: "Construct rule: add rule list, action and arch"
      set_fact: tmpline="-a always,exit -F arch=b32 "
    - name: "Construct rule: add syscalls"
      set_fact: tmpline="{{tmpline + '-S ' + item.item + ' ' }}"
      loop: "{{ audit_kernel_found_32_rules_d.results }}"
      when: item.matched is defined and item.matched == 0
    - name: "Construct rule: add key"
      set_fact: tmpline="{{ tmpline + '-k modules' }}"
    - name: insert the line in appropriate file
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ tmpline }}"
        create: true
        state: present
  when: audit_kernel_matched_32_rules_d < audit_kernel_number_of_syscalls

- name: Inserts the modules rule in rules.d when on x86_64
  block:
    - name: "Construct rule: add rule list, action and arch"
      set_fact: tmpline="-a always,exit -F arch=b64 "
    - name: "Construct rule: add syscalls"
      set_fact: tmpline="{{tmpline + '-S ' + item.item + ' ' }}"
      loop: "{{ audit_kernel_found_64_rules_d.results }}"
      when: item.matched is defined and item.matched == 0
    - name: "Construct rule: add key"
      set_fact: tmpline="{{ tmpline + '-k modules' }}"
    - name: insert the line in appropriate file
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ tmpline }}"
        create: true
        state: present
  when: audit_kernel_matched_64_rules_d < audit_kernel_number_of_syscalls and audit_arch is defined and audit_arch == 'b64'


#   
# rules in /etc/audit/audit.rules
#

- name: Check existence of syscalls for 32 bit architecture in /etc/audit/audit.rules
  find:
    paths: "/etc/audit"
    contains: '^\s*-a\s+always,exit\s+-F\s+arch=b32\s+.*-S\s+.*[\s,]+{{ item }}[\s,]+.*$'
    patterns: "audit.rules"
  register: audit_kernel_found_32_audit_rules
  loop: "{{ syscalls }}"

- name: get number of matched 32 bit syscalls in /etc/audit/audit.rules
  set_fact: audit_kernel_matched_32_audit_rules="{{audit_kernel_found_32_audit_rules.results|sum(attribute='matched')|int }}"

- name: Check existence of syscalls for 64 bit architecture in /etc/audit/audit.rules
  find:
    paths: "/etc/audit"
    contains: '^\s*-a\s+always,exit\s+-F\s+arch=b64\s+.*-S\s+.*[\s,]+{{ item }}[\s,]+.*$'
    patterns: "audit.rules"
  register: audit_kernel_found_64_audit_rules
  loop: "{{ syscalls }}"

- name: get number of matched 64 bit syscalls in /etc/audit/rules.d/*
  set_fact: audit_kernel_matched_64_audit_rules="{{audit_kernel_found_64_audit_rules.results|sum(attribute='matched')|int }}"

- name: Inserts the modules rule in audit.rules when on x86
  block:
    - name: "Construct rule: add rule list, action and arch"
      set_fact: tmpline="-a always,exit -F arch=b32 "
    - name: "Construct rule: add syscalls"
      set_fact: tmpline="{{tmpline + '-S ' + item.item + ' ' }}"
      loop: "{{ audit_kernel_found_32_audit_rules.results }}"
      when: item.matched is defined and item.matched == 0
    - name: "Construct rule: add key"
      set_fact: tmpline="{{ tmpline + '-k modules' }}"
    - name: insert the line in appropriate file
      lineinfile:
        path: "/etc/audit/audit.rules"
        line: "{{ tmpline }}"
        create: true
        state: present
  when: audit_kernel_matched_32_audit_rules < audit_kernel_number_of_syscalls

- name: Inserts the modules rule in rules.d when on x86_64
  block:
    - name: "Construct rule: add rule list, action and arch"
      set_fact: tmpline="-a always,exit -F arch=b64 "
    - name: "Construct rule: add syscalls"
      set_fact: tmpline="{{tmpline + '-S ' + item.item + ' ' }}"
      loop: "{{ audit_kernel_found_64_audit_rules.results }}"
      when: item.matched is defined and item.matched == 0
    - name: "Construct rule: add key"
      set_fact: tmpline="{{ tmpline + '-k modules' }}"
    - name: insert the line in appropriate file
      lineinfile:
        path: "/etc/audit/audit.rules"
        line: "{{ tmpline }}"
        create: true
        state: present
  when: audit_kernel_matched_64_audit_rules < audit_kernel_number_of_syscalls and audit_arch is defined and audit_arch == 'b64'
