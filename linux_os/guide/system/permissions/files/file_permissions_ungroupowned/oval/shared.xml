<def-group>
  <definition class="compliance" id="{{{ rule_id }}}" version="2">
    {{{ oval_metadata("All files should be owned by a group") }}}
    <criteria>
      <criterion test_ref="test_file_permissions_ungroupowned"
        comment="Check all files and make sure they are owned by a group"/>
    </criteria>
  </definition>

  <unix:file_test id="test_file_permissions_ungroupowned" version="1"
    check="all" check_existence="none_exist" comment="files with no group owner">
    <unix:object object_ref="object_file_permissions_ungroupowned"/>
  </unix:file_test>

  <unix:file_state id="state_file_permissions_ungroupowned" version="1"
    comment="Files that are owned by a group.">
    <unix:group_id datatype="int" var_check="at least one"
      var_ref="variable_file_permissions_ungroupowned"/>
  </unix:file_state>

  <unix:file_object id="object_file_permissions_ungroupowned" version="1"
    comment="all local files">
    <!-- We can't traverse symlinks here since e.g. /sys file system might contain symlink loops
         resulting into excessive memory use by the scanner process & possible subsequent OOM killer
         termination of it. See e.g.: https://www.redhat.com/archives/open-scap-list/2014-May/msg00005.html
         Therefore traverse only directories -->
    <unix:behaviors recurse="directories" recurse_direction="down" recurse_file_system="local"/>
    <unix:path>/</unix:path>
    <unix:filename operation="pattern match">.*</unix:filename>
    <filter action="exclude">state_file_permissions_ungroupowned</filter>
  </unix:file_object>

  <ind:textfilecontent54_object id="etc_group_object" version="1">
    <ind:filepath>/etc/group</ind:filepath>
    <ind:pattern operation="pattern match">^[^:]+:[^:]*:([\d]+):[^:]*$</ind:pattern>
    <ind:instance operation="greater than or equal" datatype="int">1</ind:instance>
  </ind:textfilecontent54_object>

  <local_variable id="variable_file_permissions_ungroupowned" version="1"
    datatype="int" comment="all GIDs on the target system">
    <object_component object_ref="etc_group_object" item_field="subexpression"/>
  </local_variable>
</def-group>
